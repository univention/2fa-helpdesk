# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024 Univention GmbH

{{- if .Values.provisioning.enabled }}
---
apiVersion: "v1"
kind: ConfigMap
metadata:
  name: {{ printf "%s-provisioning-init" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.provisioning.extraLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.provisioning.extraLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.provisioning.extraAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.provisioning.extraAnnotations "context" . ) | nindent 4 }}
  {{- end }}

data:
  KEYCLOAK_URL: {{ tpl .Values.twofaHelpdeskBackend.config.keycloak_url . | quote }}
---
kind: "ConfigMap"
apiVersion: "v1"
metadata:
  name: {{ printf "%s-provisioning-env" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.provisioning.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.additionalLabels.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.provisioning.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.provisioning.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
data:
  DEBUG: {{ .Values.provisioning.config.debug.enabled | quote }}
  DOMAIN: {{ .Values.global.domain | quote }}
  KEYCLOAK_USERNAME: {{ tpl .Values.twofaHelpdeskBackend.config.keycloak_admin_user . | quote }}
  KEYCLOAK_HOST: {{ tpl .Values.twofaHelpdeskBackend.config.oidc_host . | quote }}
  KEYCLOAK_REALM: {{ tpl .Values.twofaHelpdeskBackend.config.oidc_realm . | quote }}
  KEYCLOAK_URL: {{ tpl .Values.twofaHelpdeskBackend.config.keycloak_url . | quote }}
  UNIVENTION_KEYCLOAK_BOOTSTRAP_TEMP_DIR: "/tmp"
  UNIVENTION_KEYCLOAK_BOOTSTRAP_DEBUG_PAUSE_BEFORE_SCRIPT_START: {{ .Values.provisioning.config.debug.pauseBeforeScriptStart  | quote }}
  KEYCLOAK_APP_BASE_URL: {{  $.Values.nubusBaseUrl | quote }}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ printf "%s-provisioning-script" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.provisioning.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.additionalLabels.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.provisioning.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.provisioning.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
data:
  run.py: |
    from keycloak import KeycloakAdmin
    import os
    import sys

    required_vars = ["KEYCLOAK_URL", "KEYCLOAK_REALM", "KEYCLOAK_USERNAME", "KEYCLOAK_PASSWORD"]
    missing = [var for var in required_vars if not os.environ.get(var)]
    if missing:
        print("Missing environment variables: " + ", ".join(missing))
        sys.exit(1)

    KEYCLOAK_URL = os.environ["KEYCLOAK_URL"]
    KEYCLOAK_REALM = os.environ["KEYCLOAK_REALM"]
    KEYCLOAK_USERNAME = os.environ["KEYCLOAK_USERNAME"]
    KEYCLOAK_PASSWORD = os.environ["KEYCLOAK_PASSWORD"]
    CLIENT_ID = "twofa-helpdesk"
    SCOPE_NAME = "twofa-default"

    kc = KeycloakAdmin(
        server_url=KEYCLOAK_URL,
        username=KEYCLOAK_USERNAME,
        password=KEYCLOAK_PASSWORD,
        realm_name=KEYCLOAK_REALM,
        user_realm_name="master",
        verify=True
    )

    kc.realm_name = KEYCLOAK_REALM

    # create client scope
    scope_id = None
    try:
        scope_id = kc.create_client_scope({
            "name": SCOPE_NAME,
            "protocol": "openid-connect"
        })
        print(f"Created client scope '{SCOPE_NAME}'")
    except:
        scopes = kc.get_client_scopes()
        scope_id = next((s['id'] for s in scopes if s['name'] == SCOPE_NAME), None)
        if scope_id:
            print(f"Scope '{SCOPE_NAME}' already exists")
        else:
            print("Failed to create or find client scope")
            sys.exit(1)

    group_mapper_payload = {
        "name": "groups-mapper",
        "protocol": "openid-connect",
        "protocolMapper": "oidc-group-membership-mapper",
        "config": {
            "claim.name": "groups",
            "full.path": "false",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "userinfo.token.claim": "true"
        }
    }

    try:
        kc.connection.raw_post(f"admin/realms/{KEYCLOAK_REALM}/client-scopes/{scope_id}/protocol-mappers/models", data=group_mapper_payload)
        print("Added group membership mapper")
    except Exception as e:
        print("Group mapper may already exist or failed: " + str(e))

    # add user-id attribute mapper
    user_id_mapper_payload = {
        "name": "user-id-mapper",
        "protocol": "openid-connect",
        "protocolMapper": "oidc-usermodel-attribute-mapper",
        "config": {
            "user.attribute": "id",
            "claim.name": "user_id",
            "claim.type": "String",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "userinfo.token.claim": "true"
        }
    }

    try:
        kc.connection.raw_post(f"admin/realms/{KEYCLOAK_REALM}/client-scopes/{scope_id}/protocol-mappers/models", data=user_id_mapper_payload)
        print("Added user-id attribute mapper")
    except Exception as e:
        print("User-id mapper may already exist or failed: " + str(e))

    clients = kc.get_clients()
    client = next((c for c in clients if c["clientId"] == CLIENT_ID), None)
    if not client:
        print(f"Client '{CLIENT_ID}' not found")
        sys.exit(1)

    try:
        kc.connection.raw_put(
            f"admin/realms/{KEYCLOAK_REALM}/clients/{client['id']}/optional-client-scopes/{scope_id}",
            data={}
        )
        print(f"Assigned scope '{SCOPE_NAME}' to client '{CLIENT_ID}' as optional")
    except Exception as e:
        print("Failed to assign scope to client: " + str(e))
{{- end }}