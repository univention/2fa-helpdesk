# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024 Univention GmbH

{{- if .Values.provisioning.enabled }}
---
apiVersion: "v1"
kind: ConfigMap
metadata:
  name: {{ printf "%s-provisioning-init" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" ( dict "customLabels" .Values.additionalLabels "context" . ) | nindent 4 }}
  {{- include "nubus-common.annotations.render" ( dict
    "values" ( list .Values.additionalAnnotations )
    "context" . )
    | nindent 2 }}
data:
  KEYCLOAK_URL: "{{ printf "http://%s:%s/realms/%s"
    (required "keycloak.connection.host is required"  (tpl .Values.keycloak.connection.host .))
    (required "keycloak.connection.port is required"  (tpl .Values.keycloak.connection.port .))
    (required "keycloak.realm is required"            (tpl .Values.keycloak.realm .)) }}"

...
---
kind: "ConfigMap"
apiVersion: "v1"
metadata:
  name: {{ printf "%s-provisioning-env" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" ( dict "customLabels" .Values.additionalLabels "context" . ) | nindent 4 }}
  {{- include "nubus-common.annotations.render" ( dict
    "values" ( list .Values.additionalAnnotations )
    "context" . )
    | nindent 2 }}
data:
  DEBUG: {{ .Values.provisioning.config.debug.enabled | quote }}
  DOMAIN: {{ .Values.global.domain | quote }}
  KEYCLOAK_USERNAME: {{ tpl .Values.keycloak.auth.username . | quote }}
  KEYCLOAK_HOST: {{ default (printf "%s-keycloak" .Release.Name) (tpl .Values.keycloak.connection.host .) | quote }}
  KEYCLOAK_REALM: {{ tpl .Values.keycloak.realm . | quote }}
  KEYCLOAK_URL: "{{ printf "http://%s:%s"
    (required "keycloak.connection.host is required" (tpl .Values.keycloak.connection.host .))
    (required "keycloak.connection.port is required" (tpl .Values.keycloak.connection.port .)) }}"
  OIDC_CLIENT_ID: {{ tpl .Values.keycloak.client . | quote }}
  UNIVENTION_KEYCLOAK_BOOTSTRAP_TEMP_DIR: "/tmp"
  UNIVENTION_KEYCLOAK_BOOTSTRAP_DEBUG_PAUSE_BEFORE_SCRIPT_START: {{ .Values.provisioning.config.debug.pauseBeforeScriptStart  | quote }}
  KEYCLOAK_APP_BASE_URL: {{ printf "https://%s" (tpl  $.Values.nubusBaseUrl .) | quote }}
  POST_LOGOUT_REDIRECT_URI: {{ tpl .Values.twofaHelpdeskFrontend.config.postLogoutRedirectURI . | quote }}
...
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ printf "%s-provisioning-script" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" ( dict "customLabels" .Values.additionalLabels "context" . ) | nindent 4 }}
  {{- include "nubus-common.annotations.render" ( dict
    "values" ( list .Values.additionalAnnotations )
    "context" . )
    | nindent 2 }}
data:
  run.py: |
    from keycloak import KeycloakAdmin
    import os
    import sys
    import json

    required_vars = ["KEYCLOAK_URL", "KEYCLOAK_REALM", "KEYCLOAK_USERNAME", "OIDC_CLIENT_ID"]
    missing = [var for var in required_vars if not os.environ.get(var)]
    if missing:
        print("Missing environment variables: " + ", ".join(missing))
        sys.exit(1)

    KEYCLOAK_URL = os.environ["KEYCLOAK_URL"]
    KEYCLOAK_REALM = os.environ["KEYCLOAK_REALM"]
    KEYCLOAK_USERNAME = os.environ["KEYCLOAK_USERNAME"]
    with open("/credentials/keycloak.secret") as fd:
      KEYCLOAK_PASSWORD = fd.read().strip()
    CLIENT_ID = os.environ["OIDC_CLIENT_ID"]
    SCOPE_NAME = "twofa-default"

    kc = KeycloakAdmin(
        server_url=KEYCLOAK_URL,
        username=KEYCLOAK_USERNAME,
        password=KEYCLOAK_PASSWORD,
        realm_name=KEYCLOAK_REALM,
        user_realm_name="master",
        verify=True
    )

    kc.realm_name = KEYCLOAK_REALM

    # create client scope
    scope_id = None
    try:
        scope_id = kc.create_client_scope({
            "name": SCOPE_NAME,
            "protocol": "openid-connect"
        })
        print(f"Created client scope '{SCOPE_NAME}'")
    except:
        scopes = kc.get_client_scopes()
        scope_id = next((s['id'] for s in scopes if s['name'] == SCOPE_NAME), None)
        if scope_id:
            print(f"Scope '{SCOPE_NAME}' already exists")
        else:
            print("Failed to create or find client scope")
            sys.exit(1)

    group_mapper_payload = {
        "name": "groups-mapper",
        "protocol": "openid-connect",
        "protocolMapper": "oidc-group-membership-mapper",
        "config": {
            "claim.name": "2fa_user_groups",
            "full.path": "true",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "userinfo.token.claim": "true"
        }
    }

    try:
        r = kc.connection.raw_post(f"admin/realms/{KEYCLOAK_REALM}/client-scopes/{scope_id}/protocol-mappers/models", data=json.dumps(group_mapper_payload))
        print("Added group membership mapper")
        r.raise_for_status()
    except Exception as e:
        print("Group mapper may already exist or failed: " + str(e))

    # add user-id attribute mapper
    sub_mapper_payload = {
        "name": "user_id",
        "protocol": "openid-connect",
        "protocolMapper": "oidc-sub-mapper",
        "config": {
            "access.token.claim": "true",
            "introspection.token.claim": "true",
            "lightweight.claim": "false"
        }
    }

    try:
        r = kc.connection.raw_post(f"admin/realms/{KEYCLOAK_REALM}/client-scopes/{scope_id}/protocol-mappers/models", data=json.dumps(sub_mapper_payload))
        print("Added user-id attribute mapper")
        r.raise_for_status()
    except Exception as e:
        print("User-id mapper may already exist or failed: " + str(e))

    clients = kc.get_clients()
    client = next((c for c in clients if c["clientId"] == CLIENT_ID), None)
    if not client:
        print(f"Client '{CLIENT_ID}' not found")
        sys.exit(1)

    try:
        r = kc.connection.raw_put(
            f"admin/realms/{KEYCLOAK_REALM}/clients/{client['id']}/default-client-scopes/{scope_id}",
            data={}
        )
        r.raise_for_status()
        print(f"Assigned scope '{SCOPE_NAME}' to client '{CLIENT_ID}' as optional")
    except Exception as e:
        print("Failed to assign scope to client: " + str(e))

    print("Finished", file=sys.stderr)
...
{{- end }}
