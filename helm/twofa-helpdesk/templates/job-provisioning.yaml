# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024 Univention GmbH

{{- if .Values.provisioning.enabled }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ include "common.names.fullname" . }}-provisioning-{{ .Release.Revision }}"
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" ( dict "customLabels" .Values.additionalLabels "context" $ ) | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  ttlSecondsAfterFinished: {{ .Values.provisioning.ttlSecondsAfterFinished }}
  template:
    metadata:
      name: "{{ include "common.names.fullname" . }}-provisioning-{{ .Release.Revision }}"
      labels:
        {{- include "common.labels.standard" . | nindent 8 }}
      annotations:
        checksum/config: '{{ include (print $.Template.BasePath "/configmap-provisioning.yaml") . | sha256sum }}'
        {{- if .Values.provisioning.extraAnnotations }}
        {{ toYaml .Values.provisioning.extraAnnotations | nindent 8 }}
        {{- end }}
    spec:
      restartPolicy: {{ coalesce .Values.provisioning.restartPolicy .Values.global.restartPolicy | quote }}
      {{- with .Values.provisioning.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.provisioning.podSecurityContext.enabled }}
      securityContext:
        {{- omit .Values.provisioning.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      initContainers:
      - name: "wait-for-keycloak-container"
        image: "{{ coalesce .Values.provisioning.image.registry .Values.global.imageRegistry }}/{{ .Values.provisioning.image.repository }}{{ if .Values.provisioning.image.sha256 }}@sha256:{{ .Values.provisioning.image.sha256 }}{{ else }}:{{ .Values.provisioning.image.tag }}{{ end }}"
        imagePullPolicy: {{ coalesce .Values.provisioning.image.imagePullPolicy .Values.global.imagePullPolicy | quote }}
        {{- if .Values.provisioning.containerSecurityContext.enabled }}
        securityContext:
          {{- omit .Values.provisioning.containerSecurityContext "enabled" | toYaml | nindent 10 }}
        {{- end }}
        env:
          - name: KEYCLOAK_URL # FIXME do not hardcode
            value: http://ums-keycloak:8080/realms/master
#        envFrom:
#          - configMapRef:
#              name: {{ printf "%s-provisioning-init" (include "common.names.fullname" .) }}
        {{- with .Values.provisioning.extraEnvVars }}
          {{- . | toYaml | nindent 10 }}
        {{- end }}
        command: ["wait-for-keycloak.py"]
        {{- if .Values.provisioning.args }}
        args: {{ .Values.provisioning.args }}
        {{- end }}
        {{- with .Values.provisioning.resources }}
        resources:
        {{ toYaml . | indent 10 }}
        {{- end }}
        volumeMounts:
          {{- if .Values.provisioning.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.provisioning.extraVolumeMounts "context" .) | nindent 10 }}
          {{- end }}
      containers:
      - name: "keycloak-provisioning"
        {{- if .Values.provisioning.containerSecurityContext.enabled }}
        securityContext:
          {{- omit .Values.provisioning.containerSecurityContext "enabled" | toYaml | nindent 10 }}
        {{- end }}
        image: "{{ coalesce .Values.provisioning.provisioningImage.registry .Values.global.imageRegistry }}/{{ .Values.provisioning.provisioningImage.repository }}{{ if .Values.provisioning.provisioningImage.sha256 }}@sha256:{{ .Values.provisioning.provisioningImage.sha256 }}{{ else }}:{{ .Values.provisioning.provisioningImage.tag }}{{ end }}"
        imagePullPolicy: {{ coalesce .Values.provisioning.provisioningImage.imagePullPolicy .Values.global.imagePullPolicy | quote }}
        command:
          - /bin/bash
          - -c
          - |
            echo wtf $KEYCLOAK_USERNAME $KEYCLOAK_PASSWORD && \
            univention-keycloak \
            --keycloak-url $KEYCLOAK_URL \
            --realm $KEYCLOAK_REALM \
            --binduser $KEYCLOAK_USERNAME \
            --bindpwd $KEYCLOAK_PASSWORD \
            oidc/rp create twofa-helpdesk \
            --app-url https://$KEYCLOAK_APP_BASE_URL \
            --redirect-uri $KEYCLOAK_APP_BASE_URL/frontend/* \
            --audience-to-map guardian \
            --admin-url $KEYCLOAK_APP_BASE_URL \
            --host-fqdn $KEYCLOAK_HOST \
            --public-client \
            --default-scopes "basic" \
            --web-origins $KEYCLOAK_APP_BASE_URL
        envFrom:
          - configMapRef:
              name: {{ printf "%s-provisioning-env" (include "common.names.fullname" .) }}
        env:
          - name: KEYCLOAK_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ums-opendesk-keycloak-credentials # FIXME: use nubus-common.secrets?? where docs, were banana
                key: admin_password
        {{- with .Values.provisioning.extraEnvVars }}
          {{- . | toYaml | nindent 10 }}
        {{- end }}
        {{- if .Values.provisioning.args }}
        args: {{ .Values.provisioning.args }}
        {{- end }}
        {{- with .Values.provisioning.resources }}
        resources:
        {{ toYaml . | indent 10 }}
        {{- end }}
        volumeMounts:
          - name: "temp-dir"
            mountPath: "/tmp"
          {{- if .Values.provisioning.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.provisioning.extraVolumeMounts "context" .) | nindent 10 }}
          {{- end }}
      {{- with .Values.provisioning.nodeSelector }}
      nodeSelector:
        {{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.provisioning.affinity }}
      affinity:
        {{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.provisioning.tolerations }}
      tolerations:
        {{ toYaml . | indent 8 }}
      {{- end }}
      volumes:
        - name: "temp-dir"
          emptyDir:
            sizeLimit: "20Mi"
        {{- if .Values.provisioning.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.provisioning.extraVolumes  "context" .) | nindent 8 }}
        {{- end }}
  backoffLimit: {{ .Values.provisioning.backoffLimit }}
...
{{- end }}