# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2025 Univention GmbH

global:
  affinity: {}
  environment: {}
  fullnameOverride: ""
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  host: twofa
  replicaCount: 1
  securityContext: {}
  tolerations: []
  imageRegistry: "artifacts.software-univention.de"
  imagePullSecrets: []
  restartPolicy: OnFailure
  postgresql:
    connection:
      host: ""
      port: ""

  domain: ""

extraIngresses: []

# -- Additional custom annotations to add to all deployed objects.
additionalAnnotations: {}

# -- Additional custom labels to add to all deployed objects.
additionalLabels: {}

# -- Image pull secrets to use for pulling images.
imagePullSecrets: []

# Service account to use.
# Ref.: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  ## @param serviceAccount.automountServiceAccountToken Allows auto mount of ServiceAccountToken on the serviceAccount created
  ## Can be set to false if pods using this serviceAccount do not need to use K8s API
  ##
  automountServiceAccountToken: false
  # -- Additional custom labels for the ServiceAccount.
  labels: {}

nubusBaseUrl: ""

provisioning:
  enabled: true
  ttlSecondsAfterFinished: 60
  config:
    debug:
      enabled: true

  image:
    registry: ""
    repository: "nubus/images/wait-for-dependency"
    tag: "0.35.0@sha256:61dfaea28a2b150459138dfd6a554ce53850cee05ef2a72ab47bbe23f2a92d0d"
    sha256: ""  # Optional
    # -- Image pull policy. This setting has higher precedence than global.imagePullPolicy.
    pullPolicy: null

  provisioningImage:
    registry: ""
    repository: "nubus/images/keycloak-bootstrap"
    tag: "0.15.0@sha256:5e7769c15ee66b03ee6b929a84a822b9ce191283cb45d6a14632d0cc8cca3032"
    sha256: ""  # Optional
    # -- Image pull policy. This setting has higher precedence than global.imagePullPolicy.
    pullPolicy: null

  podSecurityContext:
    enabled: true
    fsGroup: 1000
    runAsUser: 1000
    runAsGroup: 1000
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault

  containerSecurityContext:
    enabled: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    privileged: false
    readOnlyRootFilesystem: true
    runAsGroup: 1000
    runAsNonRoot: true
    runAsUser: 1000
    seccompProfile:
      type: RuntimeDefault
  tolerations: []
  backoffLimit: 6
  resources:
    limits:
      cpu: 1
      memory: "1Gi"
    requests:
      cpu: 0.1
      memory: "64Mi"

ingress:

  # -- Enable creation of Ingress.
  enabled: true

  # -- Define custom ingress annotations for all Ingresses.
  annotations: {}

  # -- Define the Fully Qualified Domain Name (FQDN) where application should be reachable. (This will be the default for all Ingresses)
  host: ""

  # Request certificates via cert-manager.io annotation
  certManager:
    # -- Enable cert-manager.io annotaion.
    enabled: false # careful with enabling this and using the same secret as nubus-portal

    # Issuer reference.
    issuerRef:
      # -- Name of cert-manager.io Issuer resource.
      name: ""
      # -- Type of Issuer, f.e. "Issuer" or "ClusterIssuer".
      kind: "ClusterIssuer"

  # -- The Ingress controlledebugr class name. (This will be the default for all Ingresses)
  ingressClassName: "nginx"

  # -- Secure an Ingress by specifying a Secret that contains a TLS private key and certificate.
  #
  # Ref.: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  tls:
    # -- Enable TLS/SSL/HTTPS for Ingress.
    enabled: true

    # -- The name of the kubernetes secret which contains a TLS private key and certificate.
    # Hint: This secret is not created by this chart and must be provided.
    secretName: ""
  items:
    - name: twofa-helpdesk-ui
      host: ""
      # -- Define the Ingress paths.
      paths:
        - path: /univention/2fa(/|$)(.*)
          pathType: ImplementationSpecific
          backend:
            service:
              name: 2fa-helpdesk-backend-ui
              port:
                number: 80
              suffix: "-ui"
      ingressClassName: ""
      annotations:
        nginx.ingress.kubernetes.io/use-regex: "true"
        nginx.ingress.kubernetes.io/rewrite-target: /ui/$2
      tls:
        # enabled: true
        secretName: ""
    - name: twofa-backend
      host: ""
      paths:
        - path: /backend
          pathType: Prefix
          backend:
            service:
              name: 2fa-helpdesk-backend
              port:
                number: 8080
              suffix: ""
      ingressClassName: ""
      annotations: {}
      tls:
        # enabled: true
        secretName: ""

# -- Keycloak specific settings.
keycloak:
  # -- Keycloak 2FA client name
  client: "twofa-helpdesk"
  # -- Keycloak realm.
  realm: ""
  admin_realm: "master"
  auth:
    # -- Keycloak user.
    username: "kcadmin"
    # -- Keycloak password.
    password: ""
    # -- Keycloak password secret reference.
    existingSecret:
      name: null
      keyMapping:
        adminPassword: null
  # -- Connection parameters.
  connection:
    # -- Keycloak URL (for the helpdesk UI).
    url: ""
    # -- Keycloak host (for cluster internal connection of the backend service).
    host: ""
    # -- Keycloak port.
    port: "8080"

twofaHelpdeskBackend:
  affinity: {}
  environment: {}
  fullnameOverride: ""
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1000
    # -- Change ownership and permission of the volume before being exposed inside a Pod.
    fsGroupChangePolicy: "Always"
  replicaCount: 1
  securityContext:
    enabled: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    privileged: false
    readOnlyRootFilesystem: true
    runAsGroup: 1000
    runAsNonRoot: true
    runAsUser: 1000
    seccompProfile:
      type: RuntimeDefault
  tolerations: []

  ingress:
    tls:
      secretName: "twofa-backend-api-tls"

  image:
    # -- Image pull policy. This setting has higher precedence than global.imagePullPolicy.
    pullPolicy: null

    registry: ""
    repository: "nubus-dev/images/twofa-helpdesk-backend"
    tag: "latest"
    # -- Define image sha256 as an alternative to `tag`
    sha256: null

  config:
    twofa_admin_groups: ["/Domain Admins"]

  service:
    # -- Additional custom annotations.
    annotations: {}
    enabled: true
    type: "ClusterIP"
    ports:
      http:
        containerPort: 8080
        port: 8080
        protocol: "TCP"

    sessionAffinity:
      enabled: false
      timeoutSeconds: 10800

  # -- Deployment resources for the backend container
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "4Gi"
      cpu: "4"

  ## Container deployment probes
  probes:
    liveness:
      enabled: true
      initialDelaySeconds: 20
      timeoutSeconds: 3
      periodSeconds: 30
      failureThreshold: 3
      successThreshold: 1

    readiness:
      enabled: true
      initialDelaySeconds: 20
      timeoutSeconds: 3
      periodSeconds: 15
      failureThreshold: 30
      successThreshold: 1

twofaHelpdeskFrontend:
  affinity: {}
  environment: {}
  fullnameOverride: ""
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1000
    # -- Change ownership and permission of the volume before being exposed inside a Pod.
    fsGroupChangePolicy: "Always"
    sysctls:
      - name: "net.ipv4.ip_unprivileged_port_start"
        value: "1"
  replicaCount: 1
  securityContext:
    enabled: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    privileged: false
    readOnlyRootFilesystem: true
    runAsGroup: 1000
    runAsNonRoot: true
    runAsUser: 1000
    seccompProfile:
      type: RuntimeDefault
  tolerations: []

  nginx:
    disableIPv6: true

  image:
    # -- Image pull policy. This setting has higher precedence than global.imagePullPolicy.
    pullPolicy: null

    registry: ""
    repository: "nubus-dev/images/twofa-helpdesk-frontend"
    tag: "latest"
    # -- Define image sha256 as an alternative to `tag`
    sha256: null

  service:
    # -- Additional custom annotations.
    annotations: {}
    enabled: true
    type: "ClusterIP"
    ports:
      http:
        containerPort: 80
        port: 80
        protocol: "TCP"

    sessionAffinity:
      enabled: false
      timeoutSeconds: 10800

  # -- Deployment resources for the frontend container
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "4Gi"
      cpu: "4"

  ## Container deployment probes
  probes:
    liveness:
      enabled: true
      initialDelaySeconds: 20
      timeoutSeconds: 3
      periodSeconds: 30
      failureThreshold: 3
      successThreshold: 1

    readiness:
      enabled: true
      initialDelaySeconds: 20
      timeoutSeconds: 3
      periodSeconds: 15
      failureThreshold: 30
      successThreshold: 1
  config:
    # -- The URI to redirect the user to after they reset their 2FA token using the self-service helpdesk.
    # If provisioning is active this URL will also be added to the Keycloak clients valid post logout redirect URIs.
    postLogoutRedirectURI: ""
