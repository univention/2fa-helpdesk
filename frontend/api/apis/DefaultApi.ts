/**
 * SPDX-License-Identifier: AGPL-3.0-only
 * SPDX-FileCopyrightText: 2025 Univention GmbH
 */

/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {
    ListUserQuery,
    ResetUsersRequest
} from '../models/index';
import {
    ListUserQueryToJSON,
    ResetUsersRequestToJSON
} from '../models/index';
import * as runtime from '../runtime';

export interface ListUsersListUsersPostRequest {
    listUserQuery?: ListUserQuery;
}

export interface ResetUserTokensTokenResetUserPostRequest {
    resetUsersRequest: ResetUsersRequest;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * List Users
     */
    async listUsersListUsersPostRaw(requestParameters: ListUsersListUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2AuthorizationCodeBearer", []);
        }

        const response = await this.request({
            path: `/list_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListUserQueryToJSON(requestParameters['listUserQuery']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * List Users
     */
    async listUsersListUsersPost(requestParameters: ListUsersListUsersPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listUsersListUsersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reset Own Token
     */
    async resetOwnTokenTokenResetOwnPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2AuthorizationCodeBearer", []);
        }

        const response = await this.request({
            path: `/token/reset/own/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Reset Own Token
     */
    async resetOwnTokenTokenResetOwnPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.resetOwnTokenTokenResetOwnPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Reset User Tokens
     */
    async resetUserTokensTokenResetUserPostRaw(requestParameters: ResetUserTokensTokenResetUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['resetUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'resetUsersRequest',
                'Required parameter "resetUsersRequest" was null or undefined when calling resetUserTokensTokenResetUserPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2AuthorizationCodeBearer", []);
        }

        const response = await this.request({
            path: `/token/reset/user/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetUsersRequestToJSON(requestParameters['resetUsersRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Reset User Tokens
     */
    async resetUserTokensTokenResetUserPost(requestParameters: ResetUserTokensTokenResetUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.resetUserTokensTokenResetUserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Whoami
     */
    async whoamiWhoamiGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2AuthorizationCodeBearer", []);
        }

        const response = await this.request({
            path: `/whoami`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Whoami
     */
    async whoamiWhoamiGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.whoamiWhoamiGetRaw(initOverrides);
        return await response.value();
    }

}
